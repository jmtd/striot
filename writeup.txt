-----------------------------------------
<TITLE>
Jonathan Dowland <jon.dowland@ncl.ac.uk>
vim: set tw=72:
----------------------------------------

Abstract
--------

We describe STRIoT: a stream-processing system built around pure
functional programming principles. STRIoT supports the composition of a
stream processing pipeline from eight purely functional operators. The
STRIoT system is designed to rewrite the supplied stream pipeline in
order to optimize its operation against a set of functional and
non-functional requirements. We compile a list of rewrite rules based on
a systematic pairwise comparison of the functional operators. We
classify each rule as total if it can be applied in any circumstance, or
partial if there are requirements on the input stream not expressed by
the type of the stream, and quantify those requirements.

Background
----------

description of striot
selection of operators

<table of operators>

    streamFilter    :: (a -> Bool) -> Stream a -> Stream a
    streamMap       :: (a -> b) -> Stream a -> Stream b
    streamFilterAcc :: (b -> a -> b) -> b -> (a -> b -> Bool) -> Stream a -> Stream a
    streamScan      :: (b -> a -> b) -> b -> Stream a -> Stream b
                    ::
    streamWindow    :: Stream a -> Stream [a]
    streamExpand    :: Stream [a] -> Stream a
                    ::
    streamMerge     :: Stream [a] -> Stream a
    streamJoin      :: Stream a -> Stream b -> Stream (a,b)

TODO
^^^^

define evaluation/description criteria; including
    * inversion
    * decomposable

Method
------

We constructed a list of operator pairs and considered each pair in
sequence in order to systematically explore all possible combinations.
For each pair, we initially attempted to reverse the order of the
operators whilst preserving their behaviour. For pairs of the same
operator, we attempt to construct an equivalent, single, fused operator.
For pairs of operators that are the dual of one another, we attempted to
eliminate them.

This method sometimes yielded a result that turned out not to behave
identically to the original pair in some or all circumstances. We noted
the behavioural differences

Once we had determined a viable rewrite rule, we examined whether its
inverse was a second, distinct viable rule.

Tools
^^^^^

Most of this exercise was conducted offline using pen and paper. For
some of the more complex rewrites, we sketched an outline on paper and
then attempted to encode the result in Haskell. Two Haskell libraries in
particular proved very useful for testing our work: QuickCheck[1] and
the Haskell Testing Framework[2]. Using these tools, we attempted to
construct a "property" that expressed the equivalence of the operator
pair before and after our rewrite. QuickCheck then generates a set of
randomly generated inputs and compares the output of each side of the
equation.

This provided some confidence that each rewrite rule was correct. It
also helped to catch a few cases where we had authored a rewrite rule we
thought was total, but wasn't. We then explored the failure cases to
determine whether the rule needed to be thrown out, or was useful in
some circumstances, in which case we noted the necessary caveats.

In order for QuickCheck to generate random Stream data, we were required
to provide a trivial implementation of the Arbitrary class for the
appropriate data type in STRIoT. This data type is higher-order, and so
to evaluate the properties, we needed to bind the type variables to
something concrete.  We chose `Char`, which has several nice properties:
it satisfies `Eq`, permitting the comparison of streams of `Chars`; it
satisfies `Ord`, simplifying the writing of predicates for
`streamFilter` and friends (we can use standard functions including `>=`
and `succ`).  Finally, when examining the output of operator-pairs in an
interactive session, `Char` is quite friendly to human eyes.

TODO
----

filter promotion to filterAcc: the technique used fixes the type of the
spare accumulator (in this case to Char). This is probably not
necessary, and might point at a wider problem.

describe inversion caveat: we would not normally expect to be able to
reason about the composition of higher-order-function parameters, such
as filter predicates. E.g. with rule 13 below

    13. filter (\x -> f x && g x) = filter f . filter g

This is only applicable if we can decompose the predicate into a lambda
and further into two sub-predicates.

Classification of non-order-preserving rewrites: whether the re-ordering
is determined *internally* or *externally*. Internally means that
the re-ordering is entirely determined by the composition of stream
operators; external means that it is dependent on one of the externally
supplied arguments, such as the predicate supplied to streamFilter.

Results
-------

     1. filter f . filter g = filter (\x -> f x && g x)
        total; fusion; invertible with decomposition caveat (13)

     2, filter f . filterAcc  / filterAcc  . filter f
     3, promote filter f => filterAcc, then
     4. filterAcc . filterAcc = ...
        (partial: type unification issue; fusion)

     5. streamFilter p . streamMap f = streamMap f . streamFilter (p . f)
        total.
        efficiency of RHS:
        If p is highly selective, then the overhead of evaluating f
        twice per selected event may be lower than the savings made by
        reducing the list de/reconstruction overhead of streamMap.
        invertible with caveat (14)

     6. streamMap f . streamMap g = streamMap (f . g)
        total; fusion
        invertible with decomposition caveat (15)

     7. streamWindow w . streamMap f = streamMap (map f) . streamWindow w
        total

     8. streamJoin s1 . streamMap f = streamMap (\(x,y) -> (x, f y)) . streamJoin s1
        total
        invertible with decomposition caveat (16)

     9. streamExpand . streamWindow _ = id
        elimination; total

    10. streamFilter f . streamExpand = streamExpand . streamMap (filter f)
        total. invertible with usual caveat (17)

    11. streamMap f . streamExpand = streamExpand . streamMap (map f)
        total. invertible with usual caveat (18)

    12. streamWindow w . streamExpand = id
        elimination. XXX only tested w = chop n

    13. streamMap f $ streamMerge [s1, s2]
        = streamMerge [streamMap f s1, streamMap f s2]
        total, invertible

Many of the above rules are invertible, producing the following
additional rules:

    14. filter (\x -> f x && g x) = filter f . filter g

    15. streamMap f . streamFilter (p . f) = streamFilter p . streamMap f
        inversion caveat: we would not normally expect to receive (p . f)
        in a decomposable form.

    16. streamMap (f . g) = streamMap f . streamMap g

    17. streamMap (\(x,y) -> (x, f y)) . streamJoin s1 = streamJoin s1 . streamMap f

    18. streamExpand . streamMap (filter f) = streamFilter f . streamExpand
        (XXX it would be good to write QuickCheck properties for the inversions)

    19. streamExpand . streamMap (map f) = streamMap f . streamExpand

    20. streamMerge [streamMap f s1, streamMap f s2]
        = streamMap f $ streamMerge [s1, s2]

11 rules
13 with filter/filterAcc separated out
20 adding inversions (with caveats)

It appears to not be possible to perform the same promotion/fusion trick
with streamScan as streamFilterAcc (XXX: Why?)

If ordering of stream items is not important, many more rewrites are
potentially applicable (XXX prove):

    21. streamMerge [streamExpand s1, streamExpand s2]
        = streamExpand (streamMerge [s1,s2])
        ordering not preserved

    22. streamFilter f $ streammerge [s1, s2]
        = streamMerge [streamFilter f s1, streamFilter f s2]
        ordering not preserved

    23. streamExpand (streamMerge [w1,w2])
        = streamMerge [streamExpand w1, streamExpand w2]
        ordering not preserved

    24. streamMerge [s1, streamMerge [s2, s3]]
        = streamMerge [s1, s2, s3]
        ordering not preserved

There are some issues to consider about constant or variable size of
lists in the case where the stream data type is a list, such as after
a streamWindow operator. In the case of streamWindow, the output list
size will be constant, but this is not reflected in the type.

join
^^^^

For pairs where the first operator is join, we know that the second
must operate on a tuple. However we cannot use this information to
decompose the arguments to higher order functions (filter or map), so in
general it seems no useful rewrites exist for this category of pairs.

Conclusion
----------

There are 64 pairings of 8 functional operators. Systematically looking
for ways to rewrite each pair whilst preserving the functional
definition yielded up to 24 rewrite rules: 12 rules classified as
applicable in any circumstance (total), a further 6 with caveats
discovered by testing for inversions of the first 12, and a further
6 partial rules that apply if the order of the stream items is not
significant.

These rules may prove useful as a base set of possible rewrites that
could be applied to a stream processing graph in order to change and/or
optimise the non-functional behaviour of the graph.

Examination of the rules, in particular the partial rules, has revealed
some properties of the graphs that, if encoded and provided to a rewrite
system, could aid in making more effective rewriting decisions. For
example if strict ordering of stream events is not important, then a
further 6 rewrite rules could be applied.

Further work
^^^^^^^^^^^^

 * looking at triples or other combinations of operators
 * factoring in consideration of partitions
 * selection and encoding of additional information about streams for
   rewrite purposes

References
----------

[1] QuickCheck
[2] HTF
